[
    {
        "id": "de27f8a7c10de9a5",
        "type": "tab",
        "label": "Kinefox",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58c9da6f27a33c52",
        "type": "inject",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "c5fb44b082f46fcf"
            ]
        ]
    },
    {
        "id": "edc0e15e957c83fe",
        "type": "change",
        "z": "de27f8a7c10de9a5",
        "name": "Sigfox_geolocation",
        "rules": [
            {
                "t": "set",
                "p": "payload.lat",
                "pt": "msg",
                "to": "payload.Geolocation.lat",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.lng",
                "pt": "msg",
                "to": "payload.Geolocation.lng",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 300,
        "wires": [
            [
                "eb451482fba8a010"
            ]
        ]
    },
    {
        "id": "eb451482fba8a010",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "function",
        "func": "var counter = 0;\nvar newMsg1;\nvar newMsg2;\nwhile (msg.payload.lat.length > counter) {\nnewMsg1 = { payload: { \"name\": \"121E1B1\", \"lat\": msg.payload.lat[counter], \"lon\": msg.payload.lng[counter] }};\n//newMsg2 = { payload: { \"name\": counter, \"lat\": msg.payload.lat[counter], \"lon\": msg.payload.lng[counter] }};\nnode.send(newMsg1);\n//node.send(newMsg2);\ncounter = counter + 1;\n}\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "d17621aca82b1d22",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Splitting HEX-message in ACC, Battery, GPS, TTF and Time",
        "func": "var counter = 0;\nvar acc;\nvar bat;\nvar gps;\nvar ttf;\nacc = { payload: msg.payload.data.slice(0, 4) };\nbat = { payload: msg.payload.data.slice(4, 8), timestamp: msg.payload.time};\nttf = { payload: msg.payload.data.slice(8, 10)}\ngps = { payload: msg.payload.data.slice(10, 24) };\nreturn [acc,bat,ttf,gps];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 360,
        "wires": [
            [],
            [
                "9b4bad4eed493fd7"
            ],
            [],
            [
                "a14988717c67ecf2"
            ]
        ]
    },
    {
        "id": "9b4bad4eed493fd7",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Battery",
        "func": "const hexToDecimal = hex => parseInt(hex, 16);\n\nconst bat = hexToDecimal(msg.payload);\n\nvar msg = { topic: global.get(\"121E1A9\"), payload: bat, timestamp: msg.timestamp*1000};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 460,
        "wires": [
            [
                "c5439f19bd866bac"
            ]
        ]
    },
    {
        "id": "e4de9e12a1c7e7f2",
        "type": "ui_worldmap",
        "z": "de27f8a7c10de9a5",
        "group": "745e09e9.481608",
        "order": 1,
        "width": "30",
        "height": "15",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "EsriS",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 2020,
        "y": 380,
        "wires": []
    },
    {
        "id": "3284b383cf5ebf4b",
        "type": "ui_form",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "label": "Select trackers and dates",
        "group": "72e6acdefc2720aa",
        "order": 1,
        "width": "6",
        "height": "11",
        "options": [
            {
                "label": "Comet",
                "value": "121E1B3",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Pekka",
                "value": "121E1AC",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Etna goat",
                "value": "121E1AB",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Hyena",
                "value": "121E1A9",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Start date",
                "value": "startTime",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End date",
                "value": "endTime",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "121E1B3": false,
            "121E1AC": false,
            "121E1AB": false,
            "121E1A9": false,
            "startTime": "",
            "endTime": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 310,
        "y": 800,
        "wires": [
            [
                "90e6f448ebd487ce",
                "d564fe6a397544f6",
                "754d711874499e4c",
                "0952809d86be37f9"
            ]
        ]
    },
    {
        "id": "8726b5945c2cb22b",
        "type": "ui_ui_control",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "events": "connect",
        "x": 100,
        "y": 940,
        "wires": [
            [
                "3284b383cf5ebf4b",
                "d564fe6a397544f6"
            ]
        ]
    },
    {
        "id": "d0e7ab10dc37423c",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Sort for timestamp",
        "func": "var counter = 0;\nvar newmsg;\nwhile (msg.payload.length > counter) {\n    newmsg = { payload: msg.payload[counter] };\n    if (msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")) {\n        node.send([newmsg]);\n    };\n    counter = counter + 1;\n}\nreturn;\n\n\n\n\n//msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "d17621aca82b1d22"
            ]
        ]
    },
    {
        "id": "90e6f448ebd487ce",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Convert ISO 1801 timestamp to UNIX",
        "func": "var startTimeISO = new Date(msg.payload.startTime);\nvar endTimeISO = new Date(msg.payload.endTime);\n\nglobal.set(\"startTimeUNIX\", startTimeISO.getTime()/1000);\nglobal.set(\"endTimeUNIX\", endTimeISO.getTime()/1000);\n\nvar newMsg = { payload: \"BEGIN\" };\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d564fe6a397544f6",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Clear chart",
        "func": "var newMsg = { payload:[]};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 760,
        "wires": [
            [
                "c5439f19bd866bac"
            ]
        ]
    },
    {
        "id": "c5439f19bd866bac",
        "type": "ui_chart",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "group": "8f7c9b72c9cadeb4",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Battery voltage",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "Please select trackers and dates!!!",
        "dot": false,
        "ymin": "2900",
        "ymax": "3400",
        "removeOlder": "10",
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#da0101",
            "#ec7404",
            "#388f38",
            "#6b43a8",
            "#47989a",
            "#2898c8",
            "#000000",
            "#ecca22"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1840,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "85e78da6430727fd",
        "type": "inject",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "b01807fde95e3789",
                "3ee63d5ad5f0b9e0"
            ]
        ]
    },
    {
        "id": "754d711874499e4c",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Device selection",
        "func": "var newmsg;\n    newmsg = { payload: \"GO\" };\nif (msg.payload[\"121E1A9\"] == true) {\n        node.send([newmsg,null, null]);\n    };\nif (msg.payload[\"121E1AC\"] == true) {\n    node.send([null,newmsg, null]);\n};\nif (msg.payload[\"121E1B3\"] == true) {\n    node.send([null, null, newmsg]);\n};\nreturn;\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 440,
        "wires": [
            [
                "c5fb44b082f46fcf",
                "74f58b3fe1eba4c6"
            ],
            [
                "b01807fde95e3789"
            ],
            [
                "3ee63d5ad5f0b9e0"
            ]
        ]
    },
    {
        "id": "0952809d86be37f9",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Save device names and IDs",
        "func": "global.set(\"121E1A9\",\"Hyena\")\nglobal.set(\"121E1AC\", \"Pekk1a\")\nglobal.set(\"121E1AB\", \"Etna Goat\")\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a794b5c7622271c3",
        "type": "inject",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 780,
        "wires": [
            [
                "3284b383cf5ebf4b"
            ]
        ]
    },
    {
        "id": "c5fb44b082f46fcf",
        "type": "mongodb in",
        "z": "de27f8a7c10de9a5",
        "mongodb": "2b864074ca24b60b",
        "name": "",
        "collection": "121E1A9",
        "operation": "find",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "edc0e15e957c83fe",
                "d0e7ab10dc37423c",
                "b2eb80586b8a1377"
            ]
        ]
    },
    {
        "id": "b01807fde95e3789",
        "type": "mongodb in",
        "z": "de27f8a7c10de9a5",
        "mongodb": "2b864074ca24b60b",
        "name": "",
        "collection": "121E1AC",
        "operation": "find",
        "x": 420,
        "y": 520,
        "wires": [
            [
                "95c97130f2b29aaf"
            ]
        ]
    },
    {
        "id": "3ee63d5ad5f0b9e0",
        "type": "mongodb in",
        "z": "de27f8a7c10de9a5",
        "mongodb": "2b864074ca24b60b",
        "name": "",
        "collection": "121E1B3",
        "operation": "find",
        "x": 420,
        "y": 660,
        "wires": [
            [
                "ff5abdc5b42d0c40"
            ]
        ]
    },
    {
        "id": "58c31dc6bcb97efd",
        "type": "debug",
        "z": "de27f8a7c10de9a5",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 240,
        "wires": []
    },
    {
        "id": "a14988717c67ecf2",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Only GPS",
        "func": "var newMsg = { payload: msg.payload};\nif (msg.payload.length > 13){\nreturn newMsg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 380,
        "wires": [
            [
                "20482617a507bcdb"
            ]
        ]
    },
    {
        "id": "ef8162587678cd63",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "GPS-coordinates",
        "func": "var lat;\nvar lon;\nvar temp;\nvar coordinates;\n\nglobal.set(\"count\",global.get(\"count\")+1)\n\nconst hexToDecimal = hex => parseInt(hex, 16);\n\nconst dec1 = hexToDecimal(msg.payload.slice(0,2));\nconst dec2 = hexToDecimal(msg.payload.slice(2,4));\nconst dec3 = hexToDecimal(msg.payload.slice(4,6));\nconst dec4 = hexToDecimal(msg.payload.slice(6,8));\nconst dec5 = hexToDecimal(msg.payload.slice(8,10));\nconst dec6 = hexToDecimal(msg.payload.slice(10,12));\nconst dec7 = hexToDecimal(msg.payload.slice(12,14));\n\ntemp = dec1;\nlat = temp << 17;\ntemp = dec2;\nlat = lat | (temp << 9);\ntemp = dec3;\nlat = lat | (temp << 1);\ntemp = dec4;\nlat = lat | ((temp >> 7) & 0xFF);\nlat -= 9000000;\n\nlon = (temp & 0b01111111) << 19;\ntemp = dec5;\nlon = lon | (temp << 11);\ntemp = dec6;\nlon = lon | (temp << 3);\ntemp = dec7;\nlon = lon | ((temp >> 5) & 0xFF);\nlon -= 18000000;\n\nif (global.get(\"count\") == 1) {\nmsg.payload = { \"name\": \"1234\", \"color\": \"#008B8B\", \"icon\": \"neutral\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n}\n\nmsg.payload = { \"name\": \"123\", \"color\": \"#008B8B\", \"icon\": \"hostile\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 400,
        "wires": [
            [
                "e4de9e12a1c7e7f2",
                "41e0d19311448f04",
                "58c31dc6bcb97efd"
            ]
        ]
    },
    {
        "id": "41e0d19311448f04",
        "type": "worldmap-tracks",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "depth": 20,
        "layer": "combined",
        "smooth": false,
        "x": 2010,
        "y": 440,
        "wires": [
            [
                "e4de9e12a1c7e7f2"
            ]
        ]
    },
    {
        "id": "20482617a507bcdb",
        "type": "batch",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "mode": "interval",
        "count": "96",
        "overlap": 0,
        "interval": "10",
        "allowEmptySequence": false,
        "topics": [],
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "ef8162587678cd63",
                "58c31dc6bcb97efd"
            ]
        ]
    },
    {
        "id": "74f58b3fe1eba4c6",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Set globals",
        "func": "global.set(\"count\", 0)\nreturn;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "95c97130f2b29aaf",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Sort for timestamp",
        "func": "var counter = 0;\nvar newmsg;\nwhile (msg.payload.length > counter) {\n    newmsg = { payload: msg.payload[counter] };\n    if (msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")) {\n        node.send([newmsg]);\n    };\n    counter = counter + 1;\n}\nreturn;\n\n\n\n\n//msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "3309146644bf76f1"
            ]
        ]
    },
    {
        "id": "3309146644bf76f1",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Splitting HEX-message in ACC, Battery, GPS, TTF and Time",
        "func": "var counter = 0;\nvar acc;\nvar bat;\nvar gps;\nvar ttf;\nacc = { payload: msg.payload.data.slice(0, 4) };\nbat = { payload: msg.payload.data.slice(4, 8), timestamp: msg.payload.time};\nttf = { payload: msg.payload.data.slice(8, 10)}\ngps = { payload: msg.payload.data.slice(10, 24) };\nreturn [acc,bat,ttf,gps];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 540,
        "wires": [
            [],
            [
                "f7c9aeb7b6c670fe"
            ],
            [],
            [
                "aa702216f9343b3a"
            ]
        ]
    },
    {
        "id": "f7c9aeb7b6c670fe",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Battery",
        "func": "const hexToDecimal = hex => parseInt(hex, 16);\n\nconst bat = hexToDecimal(msg.payload);\n\nvar msg = { topic: global.get(\"121E1AC\"), payload: bat, timestamp: msg.timestamp*1000};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 640,
        "wires": [
            [
                "c5439f19bd866bac"
            ]
        ]
    },
    {
        "id": "aa702216f9343b3a",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Only GPS",
        "func": "var newMsg = { payload: msg.payload};\nif (msg.payload.length > 13){\nreturn newMsg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 560,
        "wires": [
            [
                "b939d5f4d0caf151"
            ]
        ]
    },
    {
        "id": "b939d5f4d0caf151",
        "type": "batch",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "mode": "interval",
        "count": "96",
        "overlap": 0,
        "interval": "10",
        "allowEmptySequence": false,
        "topics": [],
        "x": 1490,
        "y": 580,
        "wires": [
            [
                "393d26ea09e109db"
            ]
        ]
    },
    {
        "id": "393d26ea09e109db",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "GPS-coordinates",
        "func": "var lat;\nvar lon;\nvar temp;\nvar coordinates;\n\nglobal.set(\"count\",global.get(\"count\")+1)\n\nconst hexToDecimal = hex => parseInt(hex, 16);\n\nconst dec1 = hexToDecimal(msg.payload.slice(0,2));\nconst dec2 = hexToDecimal(msg.payload.slice(2,4));\nconst dec3 = hexToDecimal(msg.payload.slice(4,6));\nconst dec4 = hexToDecimal(msg.payload.slice(6,8));\nconst dec5 = hexToDecimal(msg.payload.slice(8,10));\nconst dec6 = hexToDecimal(msg.payload.slice(10,12));\nconst dec7 = hexToDecimal(msg.payload.slice(12,14));\n\ntemp = dec1;\nlat = temp << 17;\ntemp = dec2;\nlat = lat | (temp << 9);\ntemp = dec3;\nlat = lat | (temp << 1);\ntemp = dec4;\nlat = lat | ((temp >> 7) & 0xFF);\nlat -= 9000000;\n\nlon = (temp & 0b01111111) << 19;\ntemp = dec5;\nlon = lon | (temp << 11);\ntemp = dec6;\nlon = lon | (temp << 3);\ntemp = dec7;\nlon = lon | ((temp >> 5) & 0xFF);\nlon -= 18000000;\n\nif (global.get(\"count\") == 1) {\nmsg.payload = { \"name\": \"1234\", \"color\": \"#008B8B\", \"icon\": \"neutral\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n}\n\nmsg.payload = { \"name\": \"123\", \"color\": \"#008B8B\", \"icon\": \"hostile\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ff5abdc5b42d0c40",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Sort for timestamp",
        "func": "var counter = 0;\nvar newmsg;\nwhile (msg.payload.length > counter) {\n    newmsg = { payload: msg.payload[counter] };\n    if (msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")) {\n        node.send([newmsg]);\n    };\n    counter = counter + 1;\n}\nreturn;\n\n\n\n\n//msg.payload[counter].time > global.get(\"startTimeUNIX\") && msg.payload[counter].time < global.get(\"endTimeUNIX\")",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 700,
        "wires": [
            [
                "787c54ba9133c13b"
            ]
        ]
    },
    {
        "id": "787c54ba9133c13b",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Splitting HEX-message in ACC, Battery, GPS, TTF and Time",
        "func": "var counter = 0;\nvar acc;\nvar bat;\nvar gps;\nvar ttf;\nacc = { payload: msg.payload.data.slice(0, 4) };\nbat = { payload: msg.payload.data.slice(4, 8), timestamp: msg.payload.time};\nttf = { payload: msg.payload.data.slice(8, 10)}\ngps = { payload: msg.payload.data.slice(10, 24) };\nreturn [acc,bat,ttf,gps];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 700,
        "wires": [
            [],
            [
                "6bb24aa46e4694d5"
            ],
            [],
            [
                "57281789919c5cf4"
            ]
        ]
    },
    {
        "id": "6bb24aa46e4694d5",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Battery",
        "func": "const hexToDecimal = hex => parseInt(hex, 16);\n\nconst bat = hexToDecimal(msg.payload);\n\nvar msg = { topic: global.get(\"121E1B7\"), payload: bat, timestamp: msg.timestamp*1000};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 800,
        "wires": [
            [
                "c5439f19bd866bac"
            ]
        ]
    },
    {
        "id": "57281789919c5cf4",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "Only GPS",
        "func": "var newMsg = { payload: msg.payload};\nif (msg.payload.length > 13){\nreturn newMsg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 720,
        "wires": [
            [
                "6f42a64647cbb48b"
            ]
        ]
    },
    {
        "id": "6f42a64647cbb48b",
        "type": "batch",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "mode": "interval",
        "count": "96",
        "overlap": 0,
        "interval": "10",
        "allowEmptySequence": false,
        "topics": [],
        "x": 1490,
        "y": 740,
        "wires": [
            [
                "cddbeba8d342ba8e"
            ]
        ]
    },
    {
        "id": "cddbeba8d342ba8e",
        "type": "function",
        "z": "de27f8a7c10de9a5",
        "name": "GPS-coordinates",
        "func": "var lat;\nvar lon;\nvar temp;\nvar coordinates;\n\nglobal.set(\"count\",global.get(\"count\")+1)\n\nconst hexToDecimal = hex => parseInt(hex, 16);\n\nconst dec1 = hexToDecimal(msg.payload.slice(0,2));\nconst dec2 = hexToDecimal(msg.payload.slice(2,4));\nconst dec3 = hexToDecimal(msg.payload.slice(4,6));\nconst dec4 = hexToDecimal(msg.payload.slice(6,8));\nconst dec5 = hexToDecimal(msg.payload.slice(8,10));\nconst dec6 = hexToDecimal(msg.payload.slice(10,12));\nconst dec7 = hexToDecimal(msg.payload.slice(12,14));\n\ntemp = dec1;\nlat = temp << 17;\ntemp = dec2;\nlat = lat | (temp << 9);\ntemp = dec3;\nlat = lat | (temp << 1);\ntemp = dec4;\nlat = lat | ((temp >> 7) & 0xFF);\nlat -= 9000000;\n\nlon = (temp & 0b01111111) << 19;\ntemp = dec5;\nlon = lon | (temp << 11);\ntemp = dec6;\nlon = lon | (temp << 3);\ntemp = dec7;\nlon = lon | ((temp >> 5) & 0xFF);\nlon -= 18000000;\n\nif (global.get(\"count\") == 1) {\nmsg.payload = { \"name\": \"1234\", \"color\": \"#008B8B\", \"icon\": \"neutral\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n}\n\nmsg.payload = { \"name\": \"123\", \"color\": \"#008B8B\", \"icon\": \"hostile\", \"lat\": lat / 100000, \"lon\": lon / 100000 }\nnode.send(msg);\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d876f33043dfbb70",
        "type": "debug",
        "z": "de27f8a7c10de9a5",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1840,
        "y": 820,
        "wires": []
    },
    {
        "id": "b2eb80586b8a1377",
        "type": "debug",
        "z": "de27f8a7c10de9a5",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "ad41429fb384d9b1",
        "type": "inject",
        "z": "de27f8a7c10de9a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1880,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "745e09e9.481608",
        "type": "ui_group",
        "name": "Map",
        "tab": "5ca6b86e2f5c6d81",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "72e6acdefc2720aa",
        "type": "ui_group",
        "name": "Form",
        "tab": "a3a951665da9da81",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8f7c9b72c9cadeb4",
        "type": "ui_group",
        "name": "Battery Voltage",
        "tab": "a3a951665da9da81",
        "order": 2,
        "disp": false,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2b864074ca24b60b",
        "type": "mongodb",
        "hostname": "sigfoxdb.lzqbfy2.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "SigfoxDB",
        "name": "MongoDB"
    },
    {
        "id": "5ca6b86e2f5c6d81",
        "type": "ui_tab",
        "name": "Map",
        "icon": "map",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a3a951665da9da81",
        "type": "ui_tab",
        "name": "Data",
        "icon": "show_chart",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]