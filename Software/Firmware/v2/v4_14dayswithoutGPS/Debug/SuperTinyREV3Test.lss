
SuperTinyREV3Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  000081ba  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000002  00803800  00803800  0000025a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003fb0  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e53  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a1e  00000000  00000000  000061d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ac  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f5e  00000000  00000000  00006ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bfb  00000000  00000000  00008e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  000099fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	cd bf       	out	0x3d, r28	; 61
  84:	df e3       	ldi	r29, 0x3F	; 63
  86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_clear_bss>:
  88:	28 e3       	ldi	r18, 0x38	; 56
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b8 e3       	ldi	r27, 0x38	; 56
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  9c:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <_ZN13SuperTinyREV317initPinsTestBoardEv>:

void SuperTinyREV3::initUART9600() {
	PORTB.DIR |= PIN2_bm; // TX = output
	PORTB.DIR &= ~PIN3_bm; // RX = input
	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); // calculate BAUD rate (depending on F_CPU)
	USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm); // constantly +17uA
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__RODATA_PM_OFFSET__+0x7f8400>
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__RODATA_PM_OFFSET__+0x7f8440>
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__RODATA_PM_OFFSET__+0x7f8a80>
  bc:	08 95       	ret

000000be <_ZN13SuperTinyREV39deepSleepEv>:
  be:	e0 e2       	ldi	r30, 0x20	; 32
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	10 8a       	std	Z+16, r1	; 0x10
  c4:	11 8a       	std	Z+17, r1	; 0x11
  c6:	e0 e5       	ldi	r30, 0x50	; 80
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	89 7f       	andi	r24, 0xF9	; 249
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
  d2:	f8 94       	cli
  d4:	80 81       	ld	r24, Z
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	80 83       	st	Z, r24
  da:	78 94       	sei
  dc:	88 95       	sleep
  de:	80 81       	ld	r24, Z
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <_ZN13SuperTinyREV311setCPUSpeedEh>:
  e6:	88 ed       	ldi	r24, 0xD8	; 216
  e8:	61 60       	ori	r22, 0x01	; 1
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	84 bf       	out	0x34, r24	; 52
  ee:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	84 bf       	out	0x34, r24	; 52
  f6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	83 81       	ldd	r24, Z+3	; 0x03
 100:	80 fd       	sbrc	r24, 0
 102:	fd cf       	rjmp	.-6      	; 0xfe <_ZN13SuperTinyREV311setCPUSpeedEh+0x18>
 104:	08 95       	ret

00000106 <_ZN13SuperTinyREV314initUART115200Ev>:
}

void SuperTinyREV3::initUART115200() {
	PORTB.DIR |= PIN2_bm; // TX = output
 106:	e0 e2       	ldi	r30, 0x20	; 32
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	80 81       	ld	r24, Z
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 83       	st	Z, r24
	PORTB.DIR &= ~PIN3_bm; // RX = input
 110:	80 81       	ld	r24, Z
 112:	87 7f       	andi	r24, 0xF7	; 247
 114:	80 83       	st	Z, r24
	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); // calculate BAUD rate (depending on F_CPU)
 116:	e0 e0       	ldi	r30, 0x00	; 0
 118:	f8 e0       	ldi	r31, 0x08	; 8
 11a:	85 e4       	ldi	r24, 0x45	; 69
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	80 87       	std	Z+8, r24	; 0x08
 120:	91 87       	std	Z+9, r25	; 0x09
	USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm); // constantly +17uA
 122:	86 81       	ldd	r24, Z+6	; 0x06
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	86 83       	std	Z+6, r24	; 0x06
 128:	08 95       	ret

0000012a <_ZN13SuperTinyREV35printEPKc>:
}

void SuperTinyREV3::print(const char *in) {
	while(*in != '\0') {
 12a:	fb 01       	movw	r30, r22
 12c:	90 81       	ld	r25, Z
 12e:	99 23       	and	r25, r25
 130:	59 f0       	breq	.+22     	; 0x148 <_ZN13SuperTinyREV35printEPKc+0x1e>
 132:	db 01       	movw	r26, r22
 134:	11 96       	adiw	r26, 0x01	; 1
		while(!(USART0.STATUS & USART_DREIF_bm)) { ; }
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f8 e0       	ldi	r31, 0x08	; 8
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	85 ff       	sbrs	r24, 5
 13e:	fd cf       	rjmp	.-6      	; 0x13a <_ZN13SuperTinyREV35printEPKc+0x10>
		USART0.TXDATAL = *in;
 140:	92 83       	std	Z+2, r25	; 0x02
	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(115200); // calculate BAUD rate (depending on F_CPU)
	USART0.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm); // constantly +17uA
}

void SuperTinyREV3::print(const char *in) {
	while(*in != '\0') {
 142:	9d 91       	ld	r25, X+
 144:	91 11       	cpse	r25, r1
 146:	f9 cf       	rjmp	.-14     	; 0x13a <_ZN13SuperTinyREV35printEPKc+0x10>
 148:	08 95       	ret

0000014a <main>:

// PB0 ------ [4.7k resistor] ------ PC3 ------ [4.7k resistor] ------ PB1

int main(void) {
	while (1) {
		device.setCPUSpeed(OSC16_PRESCALER_CPU_2MHZ);
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	98 e3       	ldi	r25, 0x38	; 56
 150:	0e 94 73 00 	call	0xe6	; 0xe6 <_ZN13SuperTinyREV311setCPUSpeedEh>
		device.initPinsTestBoard();
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	98 e3       	ldi	r25, 0x38	; 56
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN13SuperTinyREV317initPinsTestBoardEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f e7       	ldi	r18, 0x7F	; 127
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	9e e1       	ldi	r25, 0x1E	; 30
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x18>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x22>
 16c:	00 00       	nop
		_delay_ms(5000);
		/*PORTA.OUTSET = PIN3_bm; // CS PIN on test board
		_delay_ms(3000);*/
		
		//device.annaPowerOn();
		device.initUART115200();
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	98 e3       	ldi	r25, 0x38	; 56
 172:	0e 94 83 00 	call	0x106	; 0x106 <_ZN13SuperTinyREV314initUART115200Ev>
 176:	2f e7       	ldi	r18, 0x7F	; 127
 178:	84 e8       	ldi	r24, 0x84	; 132
 17a:	9e e1       	ldi	r25, 0x1E	; 30
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x32>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x3c>
 186:	00 00       	nop
 188:	c4 e0       	ldi	r28, 0x04	; 4

		//device.print("AT&W\r"); // commit all settings to be stored in start-up database
		//_delay_ms(300);
		uint8_t i = 0;
		while(1) {
			device.print("AT+CPWROFF\r"); // store settings in NVM and restart
 18a:	6a eb       	ldi	r22, 0xBA	; 186
 18c:	71 e8       	ldi	r23, 0x81	; 129
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	98 e3       	ldi	r25, 0x38	; 56
 192:	0e 94 95 00 	call	0x12a	; 0x12a <_ZN13SuperTinyREV35printEPKc>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	9d e3       	ldi	r25, 0x3D	; 61
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x52>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x5c>
 1a6:	00 00       	nop
 1a8:	c1 50       	subi	r28, 0x01	; 1
			_delay_ms(10000);
			i++;
			if(i > 3) break;
 1aa:	79 f7       	brne	.-34     	; 0x18a <main+0x40>
		
		//device.printU16(device.readSupplyVoltage());
		//_delay_ms(1000);
		//device.println("");
		
		device.deepSleep();
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	98 e3       	ldi	r25, 0x38	; 56
 1b0:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN13SuperTinyREV39deepSleepEv>
}*/

// PB0 ------ [4.7k resistor] ------ PC3 ------ [4.7k resistor] ------ PB1

int main(void) {
	while (1) {
 1b4:	ca cf       	rjmp	.-108    	; 0x14a <main>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
