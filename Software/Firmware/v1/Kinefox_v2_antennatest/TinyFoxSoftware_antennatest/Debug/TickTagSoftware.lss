
TickTagSoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000002c5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000007  0000822a  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000014  00803800  00803800  000002c5  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000044ba  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002231  00000000  00000000  00004972  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d61  00000000  00000000  00006ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002fc  00000000  00000000  00007904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025f5  00000000  00000000  00007c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007b4  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  6c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  70:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_copy_data>:
  84:	18 e3       	ldi	r17, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	e1 e3       	ldi	r30, 0x31	; 49
  8c:	f2 e0       	ldi	r31, 0x02	; 2
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	28 e3       	ldi	r18, 0x38	; 56
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b8 e3       	ldi	r27, 0x38	; 56
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a4 31       	cpi	r26, 0x14	; 20
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  ae:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <_Z15deviceStopTimerv>:
	// after settings speed to 32KHz all delays are wrong by a factor of 1MHz / 32kHz = 31UL, use _delay_ms(Helper::to32KHz(1000));
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc | 0 << CLKCTRL_PEN_bp); // set the main clock prescaler divisor to 2X and disable the Main clock prescaler (with PEN = 0, means CLK_PER = CLK_MAIN (prescaler disabled))
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSCULP32K_gc | 0 << CLKCTRL_CLKOUT_bp); // set the main clock to internal 32kHz oscillator, clock out disabled
	_PROTECTED_WRITE(CLKCTRL.OSC20MCTRLA, 0x00); // ensure 20MHz isn't forced on
	while(CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) { ; } // wait until clock changed	
}
  b6:	f8 94       	cli
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	12 86       	std	Z+10, r1	; 0x0a
  be:	10 82       	st	Z, r1
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <_Z18deviceStandbySleepv>:
  c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z15deviceStopTimerv>
  c8:	e0 e2       	ldi	r30, 0x20	; 32
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	10 8a       	std	Z+16, r1	; 0x10
  ce:	11 8a       	std	Z+17, r1	; 0x11
  d0:	e0 e5       	ldi	r30, 0x50	; 80
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	89 7f       	andi	r24, 0xF9	; 249
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	88 95       	sleep
  e4:	08 95       	ret

000000e6 <_Z17deviceSetCPUSpeedh>:

void deviceSetCPUSpeed(uint8_t prescalerDivision) {
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLB, prescalerDivision | 1 << CLKCTRL_PEN_bp); // first bit = prescaler, always enabled
  e6:	28 ed       	ldi	r18, 0xD8	; 216
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	24 bf       	out	0x34, r18	; 52
  ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
	_PROTECTED_WRITE(CLKCTRL.MCLKCTRLA, 0); // use internal 16/20MHz oscillator
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	24 bf       	out	0x34, r18	; 52
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
	while(CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) { ; } // wait until clock changed
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	83 81       	ldd	r24, Z+3	; 0x03
 100:	80 fd       	sbrc	r24, 0
 102:	fd cf       	rjmp	.-6      	; 0xfe <_Z17deviceSetCPUSpeedh+0x18>
}
 104:	08 95       	ret

00000106 <_Z8initTestv>:
	| (OUTPUT_DIR << PIN2_bp)			// PA2: LED_GREEN
	| (OUTPUT_DIR << PIN3_bp)			// PA3: **UNUSED**
	| (OUTPUT_DIR << PIN4_bp)			// PA4: **UNUSED**
	| (OUTPUT_DIR << PIN5_bp)			// PA5: WAKEUP
	| (OUTPUT_DIR << PIN6_bp)			// PA6: **UNUSED**
	| (OUTPUT_DIR << PIN7_bp);			// PA7: **UNUSED**
 106:	8e ef       	ldi	r24, 0xFE	; 254
 108:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__RODATA_PM_OFFSET__+0x7f8400>
	PORTB.DIR = (OUTPUT_DIR << PIN0_bp)	// PB0: **UNUSED**
	| (OUTPUT_DIR << PIN1_bp)			// PB1: **UNUSED**
	| (OUTPUT_DIR << PIN2_bp)			// PB2: TXD
	| (INPUT_DIR << PIN3_bp)			// PB3: RXD
	| (OUTPUT_DIR << PIN4_bp)			// PB4: **UNUSED**
	| (OUTPUT_DIR << PIN5_bp);			// PB5: **UNUSED**
 10c:	87 e3       	ldi	r24, 0x37	; 55
 10e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
	PORTC.DIR = (OUTPUT_DIR << PIN0_bp)	// PC0: **UNUSED**
	| (OUTPUT_DIR << PIN1_bp)			// PC1: START
	| (OUTPUT_DIR << PIN2_bp)			// PC2: **UNUSED**
	| (OUTPUT_DIR << PIN3_bp);			// PC3: **UNUSED**
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__RODATA_PM_OFFSET__+0x7f8440>
 118:	08 95       	ret

0000011a <main>:
}

int main(void) {
	while(1) {
		// Do on every wake up
		RTC.CTRLA = 0; // disable RTC interrupt
 11a:	68 94       	set
 11c:	ee 24       	eor	r14, r14
 11e:	e6 f8       	bld	r14, 6
 120:	ff 24       	eor	r15, r15
 122:	f3 94       	inc	r15
		deviceSetCPUSpeed(OSC16_PRESCALER_CPU_1MHZ);
		initTest();
		usePrintf(); // use printf function for uart communication
		initPrimaryUARTwith9600(); // init uart to communicate with L70
		
		PORTA.OUTSET = PIN5_bm; // start sigfox module
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d4 e0       	ldi	r29, 0x04	; 4
 128:	00 e2       	ldi	r16, 0x20	; 32
		
		PORTA.OUTSET = PIN2_bm; // led on
 12a:	14 e0       	ldi	r17, 0x04	; 4
}

int main(void) {
	while(1) {
		// Do on every wake up
		RTC.CTRLA = 0; // disable RTC interrupt
 12c:	f7 01       	movw	r30, r14
 12e:	10 82       	st	Z, r1
		deviceSetCPUSpeed(OSC16_PRESCALER_CPU_1MHZ);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z17deviceSetCPUSpeedh>
		initTest();
 136:	0e 94 83 00 	call	0x106	; 0x106 <_Z8initTestv>
		usePrintf(); // use printf function for uart communication
 13a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z9usePrintfv>
		initPrimaryUARTwith9600(); // init uart to communicate with L70
 13e:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z23initPrimaryUARTwith9600v>
		
		PORTA.OUTSET = PIN5_bm; // start sigfox module
 142:	0d 83       	std	Y+5, r16	; 0x05
		
		PORTA.OUTSET = PIN2_bm; // led on
 144:	1d 83       	std	Y+5, r17	; 0x05
		PORTA.OUTCLR = PIN5_bm; // stop sigfox module
 146:	0e 83       	std	Y+6, r16	; 0x06
		
		printf("AT$P=2\n");
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	92 e8       	ldi	r25, 0x82	; 130
 14c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <puts>
		/*char messageBuffer[80] = { 0 };
		while(1) {
			if(uartRead('K', messageBuffer, 70, 3000)) { break; } // wait until L70 is booted, should return $PMTK010,00X*2E\r\n
		}*/
		
		PORTA.OUTCLR = PIN2_bm; // led off
 150:	1e 83       	std	Y+6, r17	; 0x06
		
		deviceStandbySleep();
 152:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z18deviceStandbySleepv>
 156:	ea cf       	rjmp	.-44     	; 0x12c <main+0x12>

00000158 <_ZL17usePrintfFunctioncP6__file>:
		printU16(in / 10);
	}
	uint8_t digit = in % 10;
	while(!(USART0.STATUS & USART_DREIF_bm)) { ; }
	USART0.TXDATAL = '0' + digit;
}
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f8 e0       	ldi	r31, 0x08	; 8
 15c:	94 81       	ldd	r25, Z+4	; 0x04
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <_ZL17usePrintfFunctioncP6__file+0x4>
 162:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret

0000016c <_Z23initPrimaryUARTwith9600v>:
 16c:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b8 e0       	ldi	r27, 0x08	; 8
 174:	16 96       	adiw	r26, 0x06	; 6
 176:	8c 91       	ld	r24, X
 178:	16 97       	sbiw	r26, 0x06	; 6
 17a:	80 6c       	ori	r24, 0xC0	; 192
 17c:	16 96       	adiw	r26, 0x06	; 6
 17e:	8c 93       	st	X, r24
 180:	16 97       	sbiw	r26, 0x06	; 6
 182:	e0 e2       	ldi	r30, 0x20	; 32
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	85 83       	std	Z+5, r24	; 0x05
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
 190:	80 81       	ld	r24, Z
 192:	87 7f       	andi	r24, 0xF7	; 247
 194:	80 83       	st	Z, r24
 196:	81 ea       	ldi	r24, 0xA1	; 161
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	18 96       	adiw	r26, 0x08	; 8
 19c:	8d 93       	st	X+, r24
 19e:	9c 93       	st	X, r25
 1a0:	19 97       	sbiw	r26, 0x09	; 9
 1a2:	08 95       	ret

000001a4 <_Z9usePrintfv>:
	return 0;
}

void usePrintf() {
	static FILE mystdout;
	fdev_setup_stream(&mystdout, usePrintfFunction, NULL, _FDEV_SETUP_WRITE);
 1a4:	e0 e0       	ldi	r30, 0x00	; 0
 1a6:	f8 e3       	ldi	r31, 0x38	; 56
 1a8:	8c ea       	ldi	r24, 0xAC	; 172
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 87       	std	Z+8, r24	; 0x08
 1ae:	91 87       	std	Z+9, r25	; 0x09
 1b0:	12 86       	std	Z+10, r1	; 0x0a
 1b2:	13 86       	std	Z+11, r1	; 0x0b
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	83 83       	std	Z+3, r24	; 0x03
 1b8:	14 86       	std	Z+12, r1	; 0x0c
 1ba:	15 86       	std	Z+13, r1	; 0x0d
	stdout = &mystdout;
 1bc:	e0 93 10 38 	sts	0x3810, r30	; 0x803810 <__iob+0x2>
 1c0:	f0 93 11 38 	sts	0x3811, r31	; 0x803811 <__iob+0x3>
 1c4:	08 95       	ret

000001c6 <puts>:
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	e0 91 10 38 	lds	r30, 0x3810	; 0x803810 <__iob+0x2>
 1d2:	f0 91 11 38 	lds	r31, 0x3811	; 0x803811 <__iob+0x3>
 1d6:	23 81       	ldd	r18, Z+3	; 0x03
 1d8:	21 ff       	sbrs	r18, 1
 1da:	1b c0       	rjmp	.+54     	; 0x212 <puts+0x4c>
 1dc:	8c 01       	movw	r16, r24
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	f8 01       	movw	r30, r16
 1e4:	81 91       	ld	r24, Z+
 1e6:	8f 01       	movw	r16, r30
 1e8:	60 91 10 38 	lds	r22, 0x3810	; 0x803810 <__iob+0x2>
 1ec:	70 91 11 38 	lds	r23, 0x3811	; 0x803811 <__iob+0x3>
 1f0:	db 01       	movw	r26, r22
 1f2:	18 96       	adiw	r26, 0x08	; 8
 1f4:	ed 91       	ld	r30, X+
 1f6:	fc 91       	ld	r31, X
 1f8:	19 97       	sbiw	r26, 0x09	; 9
 1fa:	88 23       	and	r24, r24
 1fc:	31 f0       	breq	.+12     	; 0x20a <puts+0x44>
 1fe:	09 95       	icall
 200:	89 2b       	or	r24, r25
 202:	79 f3       	breq	.-34     	; 0x1e2 <puts+0x1c>
 204:	df ef       	ldi	r29, 0xFF	; 255
 206:	cf ef       	ldi	r28, 0xFF	; 255
 208:	ec cf       	rjmp	.-40     	; 0x1e2 <puts+0x1c>
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	09 95       	icall
 20e:	89 2b       	or	r24, r25
 210:	19 f0       	breq	.+6      	; 0x218 <puts+0x52>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	02 c0       	rjmp	.+4      	; 0x21c <puts+0x56>
 218:	8d 2f       	mov	r24, r29
 21a:	9c 2f       	mov	r25, r28
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
