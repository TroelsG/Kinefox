
TinyFoxSoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  00000968  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005e  0000890a  0000090a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000012  00803802  00803802  00000a1e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004540  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002349  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ec8  00000000  00000000  00007461  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002e4  00000000  00000000  0000832c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ecc  00000000  00000000  00008610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f59  00000000  00000000  0000a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  0000b435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_3>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  6c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  70:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62

00000084 <__do_copy_data>:
  84:	18 e3       	ldi	r17, 0x38	; 56
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b8 e3       	ldi	r27, 0x38	; 56
  8a:	e8 e6       	ldi	r30, 0x68	; 104
  8c:	f9 e0       	ldi	r31, 0x09	; 9
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	28 e3       	ldi	r18, 0x38	; 56
  9c:	a2 e0       	ldi	r26, 0x02	; 2
  9e:	b8 e3       	ldi	r27, 0x38	; 56
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a4 31       	cpi	r26, 0x14	; 20
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  ae:	0c 94 83 04 	jmp	0x906	; 0x906 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <_Z16sigfoxFirstStartv>:
  b6:	8a e0       	ldi	r24, 0x0A	; 10
  b8:	99 e8       	ldi	r25, 0x89	; 137
  ba:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e3       	ldi	r18, 0x3F	; 63
  c0:	8d e0       	ldi	r24, 0x0D	; 13
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <_Z16sigfoxFirstStartv+0xe>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_Z16sigfoxFirstStartv+0x18>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <_Z17sigfoxWaitForOkayj>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	c4 5b       	subi	r28, 0xB4	; 180
  dc:	d1 09       	sbc	r29, r1
  de:	cd bf       	out	0x3d, r28	; 61
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	9c 01       	movw	r18, r24
  e4:	44 eb       	ldi	r20, 0xB4	; 180
  e6:	be 01       	movw	r22, r28
  e8:	6f 5f       	subi	r22, 0xFF	; 255
  ea:	7f 4f       	sbci	r23, 0xFF	; 255
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	0e 94 ba 03 	call	0x774	; 0x774 <_Z8uartReadcPchj>
  f2:	88 23       	and	r24, r24
  f4:	81 f0       	breq	.+32     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
  f6:	6f e4       	ldi	r22, 0x4F	; 79
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 78 04 	call	0x8f0	; 0x8f0 <strchr>
 102:	fc 01       	movw	r30, r24
 104:	89 2b       	or	r24, r25
 106:	31 f0       	breq	.+12     	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 81       	ld	r25, Z
 10c:	9f 34       	cpi	r25, 0x4F	; 79
 10e:	19 f0       	breq	.+6      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	01 c0       	rjmp	.+2      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	cc 54       	subi	r28, 0x4C	; 76
 118:	df 4f       	sbci	r29, 0xFF	; 255
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <_Z11sigfoxAlivev>:
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	99 e8       	ldi	r25, 0x89	; 137
 128:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17sigfoxWaitForOkayj>
 134:	08 95       	ret

00000136 <_Z11sigfoxSleepv>:
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	99 e8       	ldi	r25, 0x89	; 137
 13a:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 13e:	80 ed       	ldi	r24, 0xD0	; 208
 140:	97 e0       	ldi	r25, 0x07	; 7
 142:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17sigfoxWaitForOkayj>
 146:	08 95       	ret

00000148 <_Z10sigfoxSendPhh>:
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	6d 30       	cpi	r22, 0x0D	; 13
 154:	40 f5       	brcc	.+80     	; 0x1a6 <_Z10sigfoxSendPhh+0x5e>
 156:	06 2f       	mov	r16, r22
 158:	7c 01       	movw	r14, r24
 15a:	86 e1       	ldi	r24, 0x16	; 22
 15c:	99 e8       	ldi	r25, 0x89	; 137
 15e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	10 16       	cp	r1, r16
 166:	11 06       	cpc	r1, r17
 168:	8c f4       	brge	.+34     	; 0x18c <_Z10sigfoxSendPhh+0x44>
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	f7 01       	movw	r30, r14
 16e:	ec 0f       	add	r30, r28
 170:	f1 1d       	adc	r31, r1
 172:	c7 fd       	sbrc	r28, 7
 174:	fa 95       	dec	r31
 176:	80 81       	ld	r24, Z
 178:	0e 94 1c 04 	call	0x838	; 0x838 <_Z14printByteAsHexh>
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	2c 2f       	mov	r18, r28
 180:	0c 2e       	mov	r0, r28
 182:	00 0c       	add	r0, r0
 184:	33 0b       	sbc	r19, r19
 186:	20 17       	cp	r18, r16
 188:	31 07       	cpc	r19, r17
 18a:	84 f3       	brlt	.-32     	; 0x16c <_Z10sigfoxSendPhh+0x24>
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	99 e8       	ldi	r25, 0x89	; 137
 190:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 194:	8e e2       	ldi	r24, 0x2E	; 46
 196:	99 e8       	ldi	r25, 0x89	; 137
 198:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 19c:	80 ee       	ldi	r24, 0xE0	; 224
 19e:	9e e2       	ldi	r25, 0x2E	; 46
 1a0:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z17sigfoxWaitForOkayj>
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <_Z10sigfoxSendPhh+0x60>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <_Z19sigfoxPrintIdAndPacPKc>:
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	c0 54       	subi	r28, 0x40	; 64
 1c6:	d1 09       	sbc	r29, r1
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	7c 01       	movw	r14, r24
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	8e 01       	movw	r16, r28
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
 1d4:	1f 4f       	sbci	r17, 0xFF	; 255
 1d6:	d8 01       	movw	r26, r16
 1d8:	e8 2f       	mov	r30, r24
 1da:	1d 92       	st	X+, r1
 1dc:	ea 95       	dec	r30
 1de:	e9 f7       	brne	.-6      	; 0x1da <_Z19sigfoxPrintIdAndPacPKc+0x26>
 1e0:	fe 01       	movw	r30, r28
 1e2:	b1 96       	adiw	r30, 0x21	; 33
 1e4:	df 01       	movw	r26, r30
 1e6:	1d 92       	st	X+, r1
 1e8:	8a 95       	dec	r24
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <_Z19sigfoxPrintIdAndPacPKc+0x32>
 1ec:	8d e1       	ldi	r24, 0x1D	; 29
 1ee:	99 e8       	ldi	r25, 0x89	; 137
 1f0:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 1f4:	28 eb       	ldi	r18, 0xB8	; 184
 1f6:	3b e0       	ldi	r19, 0x0B	; 11
 1f8:	40 e2       	ldi	r20, 0x20	; 32
 1fa:	b8 01       	movw	r22, r16
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	0e 94 ba 03 	call	0x774	; 0x774 <_Z8uartReadcPchj>
 202:	18 2f       	mov	r17, r24
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <_Z19sigfoxPrintIdAndPacPKc+0x56>
 208:	3f c0       	rjmp	.+126    	; 0x288 <_Z19sigfoxPrintIdAndPacPKc+0xd4>
 20a:	e7 ea       	ldi	r30, 0xA7	; 167
 20c:	f1 e6       	ldi	r31, 0x61	; 97
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <_Z19sigfoxPrintIdAndPacPKc+0x5a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <_Z19sigfoxPrintIdAndPacPKc+0x60>
 214:	00 00       	nop
 216:	85 e2       	ldi	r24, 0x25	; 37
 218:	99 e8       	ldi	r25, 0x89	; 137
 21a:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 21e:	28 eb       	ldi	r18, 0xB8	; 184
 220:	3b e0       	ldi	r19, 0x0B	; 11
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	be 01       	movw	r22, r28
 226:	6f 5d       	subi	r22, 0xDF	; 223
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	0e 94 ba 03 	call	0x774	; 0x774 <_Z8uartReadcPchj>
 230:	18 2f       	mov	r17, r24
 232:	88 23       	and	r24, r24
 234:	49 f1       	breq	.+82     	; 0x288 <_Z19sigfoxPrintIdAndPacPKc+0xd4>
 236:	0e 94 8e 03 	call	0x71c	; 0x71c <_Z22initSecondUARTwith9600v>
 23a:	8d e2       	ldi	r24, 0x2D	; 45
 23c:	99 e8       	ldi	r25, 0x89	; 137
 23e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 242:	c7 01       	movw	r24, r14
 244:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	99 e8       	ldi	r25, 0x89	; 137
 24c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 258:	86 e3       	ldi	r24, 0x36	; 54
 25a:	99 e8       	ldi	r25, 0x89	; 137
 25c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 260:	ce 01       	movw	r24, r28
 262:	81 96       	adiw	r24, 0x21	; 33
 264:	0e 94 11 04 	call	0x822	; 0x822 <_Z7printlnPKc>
 268:	87 ea       	ldi	r24, 0xA7	; 167
 26a:	91 e6       	ldi	r25, 0x61	; 97
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <_Z19sigfoxPrintIdAndPacPKc+0xb8>
 270:	00 c0       	rjmp	.+0      	; 0x272 <_Z19sigfoxPrintIdAndPacPKc+0xbe>
 272:	00 00       	nop
 274:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z23initPrimaryUARTwith9600v>
 278:	0e 94 b2 03 	call	0x764	; 0x764 <_Z20deinitSecondUartPinsv>
 27c:	a7 ea       	ldi	r26, 0xA7	; 167
 27e:	b1 e6       	ldi	r27, 0x61	; 97
 280:	11 97       	sbiw	r26, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <_Z19sigfoxPrintIdAndPacPKc+0xcc>
 284:	00 c0       	rjmp	.+0      	; 0x286 <_Z19sigfoxPrintIdAndPacPKc+0xd2>
 286:	00 00       	nop
 288:	81 2f       	mov	r24, r17
 28a:	c0 5c       	subi	r28, 0xC0	; 192
 28c:	df 4f       	sbci	r29, 0xFF	; 255
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	de bf       	out	0x3e, r29	; 62
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	08 95       	ret

000002a0 <_Z14deviceInitPinsv>:
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f4 e0       	ldi	r31, 0x04	; 4
 2a4:	8a ef       	ldi	r24, 0xFA	; 250
 2a6:	80 83       	st	Z, r24
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__RODATA_PM_OFFSET__+0x7f8420>
 2ae:	8f e0       	ldi	r24, 0x0F	; 15
 2b0:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__RODATA_PM_OFFSET__+0x7f8440>
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	83 8b       	std	Z+19, r24	; 0x13
 2b8:	08 95       	ret

000002ba <_Z18deviceStandbySleepv>:
 2ba:	e0 e2       	ldi	r30, 0x20	; 32
 2bc:	f4 e0       	ldi	r31, 0x04	; 4
 2be:	10 8a       	std	Z+16, r1	; 0x10
 2c0:	11 8a       	std	Z+17, r1	; 0x11
 2c2:	e0 e5       	ldi	r30, 0x50	; 80
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	89 7f       	andi	r24, 0xF9	; 249
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	80 83       	st	Z, r24
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24
 2d4:	88 95       	sleep
 2d6:	08 95       	ret

000002d8 <_Z30deviceInitInternalRTCInterruptj>:
 2d8:	9c 01       	movw	r18, r24
 2da:	f8 94       	cli
 2dc:	e0 e4       	ldi	r30, 0x40	; 64
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	91 81       	ldd	r25, Z+1	; 0x01
 2e2:	91 11       	cpse	r25, r1
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <_Z30deviceInitInternalRTCInterruptj+0x8>
 2e6:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__RODATA_PM_OFFSET__+0x7f8148>
 2ea:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__RODATA_PM_OFFSET__+0x7f8149>
 2ee:	e0 e4       	ldi	r30, 0x40	; 64
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	91 11       	cpse	r25, r1
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <_Z30deviceInitInternalRTCInterruptj+0x1a>
 2f8:	c9 01       	movw	r24, r18
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	e0 e4       	ldi	r30, 0x40	; 64
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	82 87       	std	Z+10, r24	; 0x0a
 308:	93 87       	std	Z+11, r25	; 0x0b
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	87 83       	std	Z+7, r24	; 0x07
 30e:	91 ec       	ldi	r25, 0xC1	; 193
 310:	90 83       	st	Z, r25
 312:	82 83       	std	Z+2, r24	; 0x02
 314:	78 94       	sei
 316:	08 95       	ret

00000318 <_Z23deviceReadSupplyVoltagev>:
 318:	e0 e0       	ldi	r30, 0x00	; 0
 31a:	f6 e0       	ldi	r31, 0x06	; 6
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 83       	st	Z, r24
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	82 83       	std	Z+2, r24	; 0x02
 324:	84 e6       	ldi	r24, 0x64	; 100
 326:	80 87       	std	Z+8, r24	; 0x08
 328:	83 e3       	ldi	r24, 0x33	; 51
 32a:	84 87       	std	Z+12, r24	; 0x0c
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	82 87       	std	Z+10, r24	; 0x0a
 330:	82 85       	ldd	r24, Z+10	; 0x0a
 332:	81 60       	ori	r24, 0x01	; 1
 334:	82 87       	std	Z+10, r24	; 0x0a
 336:	85 81       	ldd	r24, Z+5	; 0x05
 338:	80 ff       	sbrs	r24, 0
 33a:	fd cf       	rjmp	.-6      	; 0x336 <_Z23deviceReadSupplyVoltagev+0x1e>
 33c:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
 340:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
 344:	40 91 12 06 	lds	r20, 0x0612	; 0x800612 <__RODATA_PM_OFFSET__+0x7f8612>
 348:	50 91 13 06 	lds	r21, 0x0613	; 0x800613 <__RODATA_PM_OFFSET__+0x7f8613>
 34c:	21 15       	cp	r18, r1
 34e:	31 05       	cpc	r19, r1
 350:	41 05       	cpc	r20, r1
 352:	51 05       	cpc	r21, r1
 354:	21 f4       	brne	.+8      	; 0x35e <_Z23deviceReadSupplyVoltagev+0x46>
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__RODATA_PM_OFFSET__+0x7f8600>
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e4       	ldi	r24, 0x40	; 64
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 36e:	c9 01       	movw	r24, r18
 370:	08 95       	ret

00000372 <_Z17deviceSetCPUSpeedh>:
 372:	28 ed       	ldi	r18, 0xD8	; 216
 374:	81 60       	ori	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	24 bf       	out	0x34, r18	; 52
 37a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__RODATA_PM_OFFSET__+0x7f8061>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	24 bf       	out	0x34, r18	; 52
 382:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RODATA_PM_OFFSET__+0x7f8060>
 386:	e0 e6       	ldi	r30, 0x60	; 96
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	83 81       	ldd	r24, Z+3	; 0x03
 38c:	80 fd       	sbrc	r24, 0
 38e:	fd cf       	rjmp	.-6      	; 0x38a <_Z17deviceSetCPUSpeedh+0x18>
 390:	08 95       	ret

00000392 <_Z19deviceSigfoxPinIdlev>:
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7f8405>
 398:	08 95       	ret

0000039a <_Z21deviceSigfoxPinWakeUpv>:
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7f8406>
 3a0:	08 95       	ret

000003a2 <__vector_3>:
//avrdude -c jtag2updi -P com17 -p t1626 -C C:\avrdude\avrdude.conf -U fuse6:w:0b00000100:m		
//avrdude -c jtag2updi -P com17 -p t1626 -C C:\avrdude\avrdude.conf -U fuse5:w:0b11110111:m

// TODO: sample voltage difference during acceleration

ISR(RTC_CNT_vect) { RTC.INTFLAGS = RTC_OVF_bm; }
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__RODATA_PM_OFFSET__+0x7f8143>
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <_Z4waitj>:
uint8_t reps = 6;  //How many times the break should be repeated. 
uint8_t activationcount = 0;
uint8_t activationreps = 0; //

void wait(uint16_t seconds) {
	deviceInitInternalRTCInterrupt(seconds);
 3c0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
	deviceStandbySleep();
 3c4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z18deviceStandbySleepv>
	RTC.CTRLA = 0; // disable RTC interrupt
 3c8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__RODATA_PM_OFFSET__+0x7f8140>
 3cc:	08 95       	ret

000003ce <main>:
}

int main(void) { 
	while(1) {
		RTC.CTRLA = 0; // disable RTC interrupt
 3ce:	00 e4       	ldi	r16, 0x40	; 64
 3d0:	11 e0       	ldi	r17, 0x01	; 1
		batteryVoltage = deviceReadSupplyVoltage(); // perform as first thing in every state
				
		if(state == ST_FIRST_START_HARD_RESET) { // will be re-entered after data download
					uint8_t error = 0;
					deviceInitPins();
					PORTA.OUTSET = PIN6_bm; // RESET being pulled up
 3d2:	e1 2c       	mov	r14, r1
 3d4:	68 94       	set
 3d6:	ff 24       	eor	r15, r15
 3d8:	f2 f8       	bld	r15, 2
 3da:	68 94       	set
 3dc:	dd 24       	eor	r13, r13
 3de:	d6 f8       	bld	r13, 6
				_delay_ms(100);
				////DEBUG
				deviceInitInternalRTCInterrupt(30);	// try again
			}
			else {
				state = ST_TRACKING;
 3e0:	cc 24       	eor	r12, r12
 3e2:	c3 94       	inc	r12
				// get voltage difference as indicator for sun conditions
				sigfoxData[0] = batteryVoltage >> 8; // These two lines are used to split the temp in two bytes
 3e4:	c7 e0       	ldi	r28, 0x07	; 7
 3e6:	d8 e3       	ldi	r29, 0x38	; 56
	RTC.CTRLA = 0; // disable RTC interrupt
}

int main(void) { 
	while(1) {
		RTC.CTRLA = 0; // disable RTC interrupt
 3e8:	f8 01       	movw	r30, r16
 3ea:	10 82       	st	Z, r1
		if(state == ST_FIRST_START_HARD_RESET) { deviceSetCPUSpeed(OSC16_PRESCALER_CPU_1MHZ);  } // 1MHz = 701uA @while(1), do this BEFORE reading supply voltage
 3ec:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <state>
 3f0:	81 11       	cpse	r24, r1
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <main+0x2c>
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17deviceSetCPUSpeedh>
			
		batteryVoltage = deviceReadSupplyVoltage(); // perform as first thing in every state
 3fa:	0e 94 8c 01 	call	0x318	; 0x318 <_Z23deviceReadSupplyVoltagev>
 3fe:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <batteryVoltage>
 402:	90 93 06 38 	sts	0x3806, r25	; 0x803806 <batteryVoltage+0x1>
				
		if(state == ST_FIRST_START_HARD_RESET) { // will be re-entered after data download
 406:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <state>
 40a:	81 11       	cpse	r24, r1
 40c:	83 c0       	rjmp	.+262    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
					uint8_t error = 0;
					deviceInitPins();
 40e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z14deviceInitPinsv>
					PORTA.OUTSET = PIN6_bm; // RESET being pulled up
 412:	f7 01       	movw	r30, r14
 414:	d5 82       	std	Z+5, r13	; 0x05
					//usePrintf(); // NOT NEEDED

			
					initPrimaryUARTwith9600(); // init uart to communicate with sigfox module
 416:	0e 94 71 03 	call	0x6e2	; 0x6e2 <_Z23initPrimaryUARTwith9600v>
					deviceSigfoxPinIdle();
 41a:	0e 94 c9 01 	call	0x392	; 0x392 <_Z19deviceSigfoxPinIdlev>

					wait(5);
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z4waitj>
					sigfoxFirstStart(); // wake up module with UART
 426:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z16sigfoxFirstStartv>
					if(!sigfoxAlive()) { error = 2; }
 42a:	0e 94 92 00 	call	0x124	; 0x124 <_Z11sigfoxAlivev>
 42e:	88 23       	and	r24, r24
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	0d c1       	rjmp	.+538    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 434:	ff e9       	ldi	r31, 0x9F	; 159
 436:	26 e8       	ldi	r18, 0x86	; 134
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	f1 50       	subi	r31, 0x01	; 1
 43c:	20 40       	sbci	r18, 0x00	; 0
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
					else {
						_delay_ms(500);
						sigfoxPrintIdAndPac(SOFTWARE_VERSION);
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	99 e8       	ldi	r25, 0x89	; 137
 44a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z19sigfoxPrintIdAndPacPKc>
 44e:	9f e9       	ldi	r25, 0x9F	; 159
 450:	e6 e8       	ldi	r30, 0x86	; 134
 452:	f1 e0       	ldi	r31, 0x01	; 1
 454:	91 50       	subi	r25, 0x01	; 1
 456:	e0 40       	sbci	r30, 0x00	; 0
 458:	f0 40       	sbci	r31, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
						_delay_ms(500);
						if(!sigfoxSleep()) { error = 3; }
 460:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11sigfoxSleepv>
 464:	88 23       	and	r24, r24
 466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	23 c1       	rjmp	.+582    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
				_delay_ms(100);
				////DEBUG
				deviceInitInternalRTCInterrupt(30);	// try again
			}
			else {
				state = ST_TRACKING;
 46a:	c0 92 13 38 	sts	0x3813, r12	; 0x803813 <state>
				// get voltage difference as indicator for sun conditions
				sigfoxData[0] = batteryVoltage >> 8; // These two lines are used to split the temp in two bytes
 46e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <batteryVoltage>
 472:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <batteryVoltage+0x1>
 476:	98 83       	st	Y, r25
				sigfoxData[1] = batteryVoltage; //
 478:	89 83       	std	Y+1, r24	; 0x01
			    // send data
				deviceSigfoxPinWakeUp();
 47a:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z21deviceSigfoxPinWakeUpv>
 47e:	87 ea       	ldi	r24, 0xA7	; 167
 480:	91 e6       	ldi	r25, 0x61	; 97
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 488:	00 00       	nop
				_delay_ms(100); // wait until sigfox module booted (does not send ok after boot via wake up pin)
				// TODO: set pin to idle again here already?!
				sigfoxSend(sigfoxData, 2);
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 a4 00 	call	0x148	; 0x148 <_Z10sigfoxSendPhh>
 492:	9f e9       	ldi	r25, 0x9F	; 159
 494:	e6 e8       	ldi	r30, 0x86	; 134
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	91 50       	subi	r25, 0x01	; 1
 49a:	e0 40       	sbci	r30, 0x00	; 0
 49c:	f0 40       	sbci	r31, 0x00	; 0
 49e:	e1 f7       	brne	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
				_delay_ms(500);
				deviceSigfoxPinIdle();
 4a4:	0e 94 c9 01 	call	0x392	; 0x392 <_Z19deviceSigfoxPinIdlev>
 4a8:	2f e9       	ldi	r18, 0x9F	; 159
 4aa:	86 e8       	ldi	r24, 0x86	; 134
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
				_delay_ms(500);
				sigfoxSleep();
 4ba:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11sigfoxSleepv>
 4be:	ef e7       	ldi	r30, 0x7F	; 127
 4c0:	fa e1       	ldi	r31, 0x1A	; 26
 4c2:	26 e0       	ldi	r18, 0x06	; 6
 4c4:	e1 50       	subi	r30, 0x01	; 1
 4c6:	f0 40       	sbci	r31, 0x00	; 0
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
				
				_delay_ms(2000);
				
				deviceSigfoxPinWakeUp();
 4d0:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z21deviceSigfoxPinWakeUpv>
 4d4:	87 ea       	ldi	r24, 0xA7	; 167
 4d6:	91 e6       	ldi	r25, 0x61	; 97
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4de:	00 00       	nop
				_delay_ms(100); // wait until sigfox module booted (does not send ok after boot via wake up pin)
				// TODO: set pin to idle again here already?!
				sigfoxSend(sigfoxData, 2);
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	ce 01       	movw	r24, r28
 4e4:	0e 94 a4 00 	call	0x148	; 0x148 <_Z10sigfoxSendPhh>
 4e8:	9f e9       	ldi	r25, 0x9F	; 159
 4ea:	e6 e8       	ldi	r30, 0x86	; 134
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	e0 40       	sbci	r30, 0x00	; 0
 4f2:	f0 40       	sbci	r31, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
				_delay_ms(500);
				deviceSigfoxPinIdle();
 4fa:	0e 94 c9 01 	call	0x392	; 0x392 <_Z19deviceSigfoxPinIdlev>
 4fe:	2f e9       	ldi	r18, 0x9F	; 159
 500:	86 e8       	ldi	r24, 0x86	; 134
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	21 50       	subi	r18, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50e:	00 00       	nop
				_delay_ms(500);
				sigfoxSleep();
 510:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11sigfoxSleepv>
			}
		}
		if((state == ST_TRACKING) && (batteryVoltage > 3000) && (count == reps)) {
 514:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <state>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	a9 f5       	brne	.+106    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 51c:	20 91 05 38 	lds	r18, 0x3805	; 0x803805 <batteryVoltage>
 520:	30 91 06 38 	lds	r19, 0x3806	; 0x803806 <batteryVoltage+0x1>
 524:	29 3b       	cpi	r18, 0xB9	; 185
 526:	eb e0       	ldi	r30, 0x0B	; 11
 528:	3e 07       	cpc	r19, r30
 52a:	08 f4       	brcc	.+2      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52c:	a9 c0       	rjmp	.+338    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
 52e:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <count>
 532:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
 536:	89 13       	cpse	r24, r25
 538:	aa c0       	rjmp	.+340    	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
				// get voltage difference as indicator for sun conditions
				sigfoxData[0] = batteryVoltage >> 8; // These two lines are used to split the temp in two bytes
 53a:	38 83       	st	Y, r19
				sigfoxData[1] = batteryVoltage; // 
 53c:	29 83       	std	Y+1, r18	; 0x01
		
				count = 0;
 53e:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <count>
				// send data
				deviceSigfoxPinWakeUp();
 542:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z21deviceSigfoxPinWakeUpv>
 546:	87 ea       	ldi	r24, 0xA7	; 167
 548:	91 e6       	ldi	r25, 0x61	; 97
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 550:	00 00       	nop
				_delay_ms(100); // wait until sigfox module booted (does not send ok after boot via wake up pin)
				// TODO: set pin to idle again here already?!
				sigfoxSend(sigfoxData, 2);
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	ce 01       	movw	r24, r28
 556:	0e 94 a4 00 	call	0x148	; 0x148 <_Z10sigfoxSendPhh>
 55a:	9f e9       	ldi	r25, 0x9F	; 159
 55c:	e6 e8       	ldi	r30, 0x86	; 134
 55e:	f1 e0       	ldi	r31, 0x01	; 1
 560:	91 50       	subi	r25, 0x01	; 1
 562:	e0 40       	sbci	r30, 0x00	; 0
 564:	f0 40       	sbci	r31, 0x00	; 0
 566:	e1 f7       	brne	.-8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 56a:	00 00       	nop
				_delay_ms(500);
				deviceSigfoxPinIdle();
 56c:	0e 94 c9 01 	call	0x392	; 0x392 <_Z19deviceSigfoxPinIdlev>
 570:	2f e9       	ldi	r18, 0x9F	; 159
 572:	86 e8       	ldi	r24, 0x86	; 134
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 580:	00 00       	nop
				_delay_ms(500);
				sigfoxSleep();
 582:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11sigfoxSleepv>
		}
		if((count < reps) && (activationreps == activationcount)) {
 586:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <count>
 58a:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
 58e:	89 17       	cp	r24, r25
 590:	68 f4       	brcc	.+26     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 592:	20 91 02 38 	lds	r18, 0x3802	; 0x803802 <__data_end>
 596:	90 91 03 38 	lds	r25, 0x3803	; 0x803803 <activationcount>
 59a:	29 13       	cpse	r18, r25
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
			    count = count+1;
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <count>
			    deviceInitInternalRTCInterrupt(SLEEP_SECONDS);
 5a4:	80 e4       	ldi	r24, 0x40	; 64
 5a6:	98 e3       	ldi	r25, 0x38	; 56
 5a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
	    }
		if(batteryVoltage < 3001) {
 5ac:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <batteryVoltage>
 5b0:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <batteryVoltage+0x1>
 5b4:	89 3b       	cpi	r24, 0xB9	; 185
 5b6:	9b 40       	sbci	r25, 0x0B	; 11
 5b8:	20 f4       	brcc	.+8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
				deviceInitInternalRTCInterrupt(SLEEP_SECONDS);
 5ba:	80 e4       	ldi	r24, 0x40	; 64
 5bc:	98 e3       	ldi	r25, 0x38	; 56
 5be:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
		}
		if(activationcount < activationreps) {
 5c2:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <activationcount>
 5c6:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 5ca:	89 17       	cp	r24, r25
 5cc:	38 f4       	brcc	.+14     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
			    activationcount = activationcount +1;
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <activationcount>
				deviceInitInternalRTCInterrupt(SLEEP_SECONDS);
 5d4:	80 e4       	ldi	r24, 0x40	; 64
 5d6:	98 e3       	ldi	r25, 0x38	; 56
 5d8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
		}
		if((batteryVoltage > 3500) && (activationreps == activationcount)){
 5dc:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <batteryVoltage>
 5e0:	90 91 06 38 	lds	r25, 0x3806	; 0x803806 <batteryVoltage+0x1>
 5e4:	8d 3a       	cpi	r24, 0xAD	; 173
 5e6:	fd e0       	ldi	r31, 0x0D	; 13
 5e8:	9f 07       	cpc	r25, r31
 5ea:	70 f1       	brcs	.+92     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 5ec:	30 91 02 38 	lds	r19, 0x3802	; 0x803802 <__data_end>
 5f0:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <activationcount>
 5f4:	32 13       	cpse	r19, r18
 5f6:	28 c0       	rjmp	.+80     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
			// get voltage difference as indicator for sun conditions
			sigfoxData[0] = batteryVoltage >> 8; // These two lines are used to split the temp in two bytes
 5f8:	98 83       	st	Y, r25
			sigfoxData[1] = batteryVoltage; //
 5fa:	89 83       	std	Y+1, r24	; 0x01
			
			// send data
			deviceSigfoxPinWakeUp();
 5fc:	0e 94 cd 01 	call	0x39a	; 0x39a <_Z21deviceSigfoxPinWakeUpv>
 600:	87 ea       	ldi	r24, 0xA7	; 167
 602:	91 e6       	ldi	r25, 0x61	; 97
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 608:	00 c0       	rjmp	.+0      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 60a:	00 00       	nop
			_delay_ms(100); // wait until sigfox module booted (does not send ok after boot via wake up pin)
			// TODO: set pin to idle again here already?!
			sigfoxSend(sigfoxData, 2);
 60c:	62 e0       	ldi	r22, 0x02	; 2
 60e:	ce 01       	movw	r24, r28
 610:	0e 94 a4 00 	call	0x148	; 0x148 <_Z10sigfoxSendPhh>
 614:	9f e9       	ldi	r25, 0x9F	; 159
 616:	e6 e8       	ldi	r30, 0x86	; 134
 618:	f1 e0       	ldi	r31, 0x01	; 1
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	e0 40       	sbci	r30, 0x00	; 0
 61e:	f0 40       	sbci	r31, 0x00	; 0
 620:	e1 f7       	brne	.-8      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 622:	00 c0       	rjmp	.+0      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 624:	00 00       	nop
			_delay_ms(500);
			deviceSigfoxPinIdle();
 626:	0e 94 c9 01 	call	0x392	; 0x392 <_Z19deviceSigfoxPinIdlev>
 62a:	2f e9       	ldi	r18, 0x9F	; 159
 62c:	86 e8       	ldi	r24, 0x86	; 134
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	21 50       	subi	r18, 0x01	; 1
 632:	80 40       	sbci	r24, 0x00	; 0
 634:	90 40       	sbci	r25, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 63a:	00 00       	nop
			_delay_ms(500);
			sigfoxSleep();
 63c:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11sigfoxSleepv>
			deviceInitInternalRTCInterrupt(60);
 640:	8c e3       	ldi	r24, 0x3C	; 60
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
	   }
	deviceStandbySleep();
 648:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z18deviceStandbySleepv>
	deviceStandbySleep();
	RTC.CTRLA = 0; // disable RTC interrupt
}

int main(void) { 
	while(1) {
 64c:	cd ce       	rjmp	.-614    	; 0x3e8 <main+0x1a>
						if(!sigfoxSleep()) { error = 3; }
					}
			
			if(error == 2) {
				////DEBUG
			    initSecondUARTwith9600(); // uart to communicate with external programmer
 64e:	0e 94 8e 03 	call	0x71c	; 0x71c <_Z22initSecondUARTwith9600v>
			    print("Error 2");
 652:	87 e4       	ldi	r24, 0x47	; 71
 654:	99 e8       	ldi	r25, 0x89	; 137
 656:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 65a:	e7 ea       	ldi	r30, 0xA7	; 167
 65c:	f1 e6       	ldi	r31, 0x61	; 97
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 662:	00 c0       	rjmp	.+0      	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 664:	00 00       	nop
			    _delay_ms(100);
			    deinitSecondUartPins();
 666:	0e 94 b2 03 	call	0x764	; 0x764 <_Z20deinitSecondUartPinsv>
 66a:	87 ea       	ldi	r24, 0xA7	; 167
 66c:	91 e6       	ldi	r25, 0x61	; 97
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 672:	00 c0       	rjmp	.+0      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 674:	00 00       	nop
			    _delay_ms(100);
			    ////DEBUG
				deviceInitInternalRTCInterrupt(30);	// try again	
 676:	8e e1       	ldi	r24, 0x1E	; 30
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
 67e:	f5 ce       	rjmp	.-534    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				_delay_ms(500);
				deviceSigfoxPinIdle();
				_delay_ms(500);
				sigfoxSleep();
		}
		if((count < reps) && (activationreps == activationcount)) {
 680:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <count>
 684:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__data_start>
 688:	89 17       	cp	r24, r25
 68a:	20 f0       	brcs	.+8      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 68c:	96 cf       	rjmp	.-212    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 68e:	89 17       	cp	r24, r25
 690:	40 f0       	brcs	.+16     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 692:	97 cf       	rjmp	.-210    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 694:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <activationcount>
 698:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 69c:	29 13       	cpse	r18, r25
 69e:	8d cf       	rjmp	.-230    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 6a0:	7e cf       	rjmp	.-260    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 6a2:	20 91 03 38 	lds	r18, 0x3803	; 0x803803 <activationcount>
 6a6:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <__data_end>
 6aa:	29 13       	cpse	r18, r25
 6ac:	8a cf       	rjmp	.-236    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 6ae:	77 cf       	rjmp	.-274    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			    ////DEBUG
				deviceInitInternalRTCInterrupt(30);	// try again	
			}
			if(error == 3) {
				////DEBUG
				initSecondUARTwith9600(); // uart to communicate with external programmer
 6b0:	0e 94 8e 03 	call	0x71c	; 0x71c <_Z22initSecondUARTwith9600v>
				print("Error 3");
 6b4:	8f e4       	ldi	r24, 0x4F	; 79
 6b6:	99 e8       	ldi	r25, 0x89	; 137
 6b8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 6bc:	e7 ea       	ldi	r30, 0xA7	; 167
 6be:	f1 e6       	ldi	r31, 0x61	; 97
 6c0:	31 97       	sbiw	r30, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6c6:	00 00       	nop
				_delay_ms(100);
				deinitSecondUartPins();
 6c8:	0e 94 b2 03 	call	0x764	; 0x764 <_Z20deinitSecondUartPinsv>
 6cc:	87 ea       	ldi	r24, 0xA7	; 167
 6ce:	91 e6       	ldi	r25, 0x61	; 97
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	f1 f7       	brne	.-4      	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6d6:	00 00       	nop
				_delay_ms(100);
				////DEBUG
				deviceInitInternalRTCInterrupt(30);	// try again
 6d8:	8e e1       	ldi	r24, 0x1E	; 30
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z30deviceInitInternalRTCInterruptj>
 6e0:	19 cf       	rjmp	.-462    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>

000006e2 <_Z23initPrimaryUARTwith9600v>:
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
 6e8:	a0 e0       	ldi	r26, 0x00	; 0
 6ea:	b8 e0       	ldi	r27, 0x08	; 8
 6ec:	16 96       	adiw	r26, 0x06	; 6
 6ee:	8c 91       	ld	r24, X
 6f0:	16 97       	sbiw	r26, 0x06	; 6
 6f2:	80 6c       	ori	r24, 0xC0	; 192
 6f4:	16 96       	adiw	r26, 0x06	; 6
 6f6:	8c 93       	st	X, r24
 6f8:	16 97       	sbiw	r26, 0x06	; 6
 6fa:	e0 e0       	ldi	r30, 0x00	; 0
 6fc:	f4 e0       	ldi	r31, 0x04	; 4
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	85 83       	std	Z+5, r24	; 0x05
 702:	80 81       	ld	r24, Z
 704:	82 60       	ori	r24, 0x02	; 2
 706:	80 83       	st	Z, r24
 708:	80 81       	ld	r24, Z
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	80 83       	st	Z, r24
 70e:	81 ea       	ldi	r24, 0xA1	; 161
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	18 96       	adiw	r26, 0x08	; 8
 714:	8d 93       	st	X+, r24
 716:	9c 93       	st	X, r25
 718:	19 97       	sbiw	r26, 0x09	; 9
 71a:	08 95       	ret

0000071c <_Z22initSecondUARTwith9600v>:
 71c:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>
 720:	a0 e0       	ldi	r26, 0x00	; 0
 722:	b8 e0       	ldi	r27, 0x08	; 8
 724:	80 e4       	ldi	r24, 0x40	; 64
 726:	16 96       	adiw	r26, 0x06	; 6
 728:	8c 93       	st	X, r24
 72a:	16 97       	sbiw	r26, 0x06	; 6
 72c:	e0 e2       	ldi	r30, 0x20	; 32
 72e:	f4 e0       	ldi	r31, 0x04	; 4
 730:	12 8a       	std	Z+18, r1	; 0x12
 732:	84 e0       	ldi	r24, 0x04	; 4
 734:	85 83       	std	Z+5, r24	; 0x05
 736:	80 81       	ld	r24, Z
 738:	84 60       	ori	r24, 0x04	; 4
 73a:	80 83       	st	Z, r24
 73c:	81 ea       	ldi	r24, 0xA1	; 161
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	18 96       	adiw	r26, 0x08	; 8
 742:	8d 93       	st	X+, r24
 744:	9c 93       	st	X, r25
 746:	19 97       	sbiw	r26, 0x09	; 9
 748:	08 95       	ret

0000074a <_Z9uartFlushv>:
 74a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 74e:	88 23       	and	r24, r24
 750:	3c f4       	brge	.+14     	; 0x760 <_Z9uartFlushv+0x16>
 752:	e0 e0       	ldi	r30, 0x00	; 0
 754:	f8 e0       	ldi	r31, 0x08	; 8
 756:	80 81       	ld	r24, Z
 758:	94 81       	ldd	r25, Z+4	; 0x04
 75a:	99 23       	and	r25, r25
 75c:	e4 f3       	brlt	.-8      	; 0x756 <_Z9uartFlushv+0xc>
 75e:	08 95       	ret
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	08 95       	ret

00000764 <_Z20deinitSecondUartPinsv>:
 764:	e0 e2       	ldi	r30, 0x20	; 32
 766:	f4 e0       	ldi	r31, 0x04	; 4
 768:	80 81       	ld	r24, Z
 76a:	8b 7f       	andi	r24, 0xFB	; 251
 76c:	80 83       	st	Z, r24
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	82 8b       	std	Z+18, r24	; 0x12
 772:	08 95       	ret

00000774 <_Z8uartReadcPchj>:
 774:	ef 92       	push	r14
 776:	ff 92       	push	r15
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	18 2f       	mov	r17, r24
 782:	7b 01       	movw	r14, r22
 784:	04 2f       	mov	r16, r20
 786:	e9 01       	movw	r28, r18
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	c7 01       	movw	r24, r14
 790:	0e 94 71 04 	call	0x8e2	; 0x8e2 <memset>
 794:	0e 94 a5 03 	call	0x74a	; 0x74a <_Z9uartFlushv>
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	e0 e0       	ldi	r30, 0x00	; 0
 79c:	f8 e0       	ldi	r31, 0x08	; 8
 79e:	84 81       	ldd	r24, Z+4	; 0x04
 7a0:	88 23       	and	r24, r24
 7a2:	54 f0       	brlt	.+20     	; 0x7b8 <_Z8uartReadcPchj+0x44>
 7a4:	21 97       	sbiw	r28, 0x01	; 1
 7a6:	a9 ef       	ldi	r26, 0xF9	; 249
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	11 97       	sbiw	r26, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <_Z8uartReadcPchj+0x36>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <_Z8uartReadcPchj+0x3c>
 7b0:	00 00       	nop
 7b2:	20 97       	sbiw	r28, 0x00	; 0
 7b4:	a1 f7       	brne	.-24     	; 0x79e <_Z8uartReadcPchj+0x2a>
 7b6:	18 c0       	rjmp	.+48     	; 0x7e8 <_Z8uartReadcPchj+0x74>
 7b8:	80 81       	ld	r24, Z
 7ba:	8a 30       	cpi	r24, 0x0A	; 10
 7bc:	69 f0       	breq	.+26     	; 0x7d8 <_Z8uartReadcPchj+0x64>
 7be:	8d 30       	cpi	r24, 0x0D	; 13
 7c0:	59 f0       	breq	.+22     	; 0x7d8 <_Z8uartReadcPchj+0x64>
 7c2:	21 e0       	ldi	r18, 0x01	; 1
 7c4:	29 0f       	add	r18, r25
 7c6:	d7 01       	movw	r26, r14
 7c8:	a9 0f       	add	r26, r25
 7ca:	b1 1d       	adc	r27, r1
 7cc:	8c 93       	st	X, r24
 7ce:	02 17       	cp	r16, r18
 7d0:	10 f4       	brcc	.+4      	; 0x7d6 <_Z8uartReadcPchj+0x62>
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <_Z8uartReadcPchj+0x64>
 7d6:	92 2f       	mov	r25, r18
 7d8:	81 13       	cpse	r24, r17
 7da:	e1 cf       	rjmp	.-62     	; 0x79e <_Z8uartReadcPchj+0x2a>
 7dc:	f7 01       	movw	r30, r14
 7de:	e9 0f       	add	r30, r25
 7e0:	f1 1d       	adc	r31, r1
 7e2:	10 82       	st	Z, r1
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <_Z8uartReadcPchj+0x76>
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	08 95       	ret

000007f8 <_Z5printPKc>:
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 81       	ld	r18, Z
 7fc:	22 23       	and	r18, r18
 7fe:	81 f0       	breq	.+32     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 800:	dc 01       	movw	r26, r24
 802:	11 96       	adiw	r26, 0x01	; 1
 804:	e0 e0       	ldi	r30, 0x00	; 0
 806:	f8 e0       	ldi	r31, 0x08	; 8
 808:	94 81       	ldd	r25, Z+4	; 0x04
 80a:	95 ff       	sbrs	r25, 5
 80c:	fd cf       	rjmp	.-6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80e:	22 83       	std	Z+2, r18	; 0x02
 810:	2d 91       	ld	r18, X+
 812:	21 11       	cpse	r18, r1
 814:	f9 cf       	rjmp	.-14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 816:	e0 e0       	ldi	r30, 0x00	; 0
 818:	f8 e0       	ldi	r31, 0x08	; 8
 81a:	84 81       	ldd	r24, Z+4	; 0x04
 81c:	85 ff       	sbrs	r24, 5
 81e:	fd cf       	rjmp	.-6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 820:	08 95       	ret

00000822 <_Z7printlnPKc>:
 822:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 826:	8a e0       	ldi	r24, 0x0A	; 10
 828:	99 e8       	ldi	r25, 0x89	; 137
 82a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 82e:	8e e2       	ldi	r24, 0x2E	; 46
 830:	99 e8       	ldi	r25, 0x89	; 137
 832:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 836:	08 95       	ret

00000838 <_Z14printByteAsHexh>:
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	64 97       	sbiw	r28, 0x14	; 20
 842:	cd bf       	out	0x3d, r28	; 61
 844:	de bf       	out	0x3e, r29	; 62
 846:	91 e1       	ldi	r25, 0x11	; 17
 848:	e7 e5       	ldi	r30, 0x57	; 87
 84a:	f9 e8       	ldi	r31, 0x89	; 137
 84c:	de 01       	movw	r26, r28
 84e:	11 96       	adiw	r26, 0x01	; 1
 850:	01 90       	ld	r0, Z+
 852:	0d 92       	st	X+, r0
 854:	9a 95       	dec	r25
 856:	e1 f7       	brne	.-8      	; 0x850 <_Z14printByteAsHexh+0x18>
 858:	e8 2f       	mov	r30, r24
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	f5 95       	asr	r31
 85e:	e7 95       	ror	r30
 860:	f5 95       	asr	r31
 862:	e7 95       	ror	r30
 864:	f5 95       	asr	r31
 866:	e7 95       	ror	r30
 868:	f5 95       	asr	r31
 86a:	e7 95       	ror	r30
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	2c 0f       	add	r18, r28
 872:	3d 1f       	adc	r19, r29
 874:	e2 0f       	add	r30, r18
 876:	f3 1f       	adc	r31, r19
 878:	90 81       	ld	r25, Z
 87a:	9a 8b       	std	Y+18, r25	; 0x12
 87c:	8f 70       	andi	r24, 0x0F	; 15
 87e:	f9 01       	movw	r30, r18
 880:	e8 0f       	add	r30, r24
 882:	f1 1d       	adc	r31, r1
 884:	80 81       	ld	r24, Z
 886:	8b 8b       	std	Y+19, r24	; 0x13
 888:	1c 8a       	std	Y+20, r1	; 0x14
 88a:	ce 01       	movw	r24, r28
 88c:	42 96       	adiw	r24, 0x12	; 18
 88e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_Z5printPKc>
 892:	64 96       	adiw	r28, 0x14	; 20
 894:	cd bf       	out	0x3d, r28	; 61
 896:	de bf       	out	0x3e, r29	; 62
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	08 95       	ret

0000089e <__udivmodsi4>:
 89e:	a1 e2       	ldi	r26, 0x21	; 33
 8a0:	1a 2e       	mov	r1, r26
 8a2:	aa 1b       	sub	r26, r26
 8a4:	bb 1b       	sub	r27, r27
 8a6:	fd 01       	movw	r30, r26
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__udivmodsi4_ep>

000008aa <__udivmodsi4_loop>:
 8aa:	aa 1f       	adc	r26, r26
 8ac:	bb 1f       	adc	r27, r27
 8ae:	ee 1f       	adc	r30, r30
 8b0:	ff 1f       	adc	r31, r31
 8b2:	a2 17       	cp	r26, r18
 8b4:	b3 07       	cpc	r27, r19
 8b6:	e4 07       	cpc	r30, r20
 8b8:	f5 07       	cpc	r31, r21
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__udivmodsi4_ep>
 8bc:	a2 1b       	sub	r26, r18
 8be:	b3 0b       	sbc	r27, r19
 8c0:	e4 0b       	sbc	r30, r20
 8c2:	f5 0b       	sbc	r31, r21

000008c4 <__udivmodsi4_ep>:
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a 94       	dec	r1
 8ce:	69 f7       	brne	.-38     	; 0x8aa <__udivmodsi4_loop>
 8d0:	60 95       	com	r22
 8d2:	70 95       	com	r23
 8d4:	80 95       	com	r24
 8d6:	90 95       	com	r25
 8d8:	9b 01       	movw	r18, r22
 8da:	ac 01       	movw	r20, r24
 8dc:	bd 01       	movw	r22, r26
 8de:	cf 01       	movw	r24, r30
 8e0:	08 95       	ret

000008e2 <memset>:
 8e2:	dc 01       	movw	r26, r24
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <memset+0x6>
 8e6:	6d 93       	st	X+, r22
 8e8:	41 50       	subi	r20, 0x01	; 1
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	e0 f7       	brcc	.-8      	; 0x8e6 <memset+0x4>
 8ee:	08 95       	ret

000008f0 <strchr>:
 8f0:	fc 01       	movw	r30, r24
 8f2:	81 91       	ld	r24, Z+
 8f4:	86 17       	cp	r24, r22
 8f6:	21 f0       	breq	.+8      	; 0x900 <strchr+0x10>
 8f8:	88 23       	and	r24, r24
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <strchr+0x2>
 8fc:	99 27       	eor	r25, r25
 8fe:	08 95       	ret
 900:	31 97       	sbiw	r30, 0x01	; 1
 902:	cf 01       	movw	r24, r30
 904:	08 95       	ret

00000906 <_exit>:
 906:	f8 94       	cli

00000908 <__stop_program>:
 908:	ff cf       	rjmp	.-2      	; 0x908 <__stop_program>
